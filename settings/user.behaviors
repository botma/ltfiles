{:+ {
     ;; The app tag is kind of like global scope. You assign behaviors that affect
     ;; all of Light Table here
     :app [(:lt.objs.style/set-skin "dark")
           (:lt.objs.app/set-default-zoom-level -0.5)
           ;; :ltexec_clj is a custom ex_command from my vim.cljs
           (:lt.plugins.vim/map-keys {"0" "^",
                                      "-" ":ltexec ltfiles.find-next-clojure-word",
                                      "j" "gj",
                                      "k" "gk"
                                      "gJ" ":ltexec ltfiles.smart-join"
                                      ;; assumes running with a CM that has an updated vim.js
                                      ;"gv" ":ltexec ltfiles.vim-reselect-visual"
                                      "[p" ":ltexec ltfiles.vim-indent-paste-above"
                                      "]p" ":ltexec ltfiles.vim-indent-paste-below"
                                      "''" ":ltexec lt.plugins.marks/jump-to-last-edit-mark"

                                      ;; <Space> is a leader key in normal mode
                                      "<Space>b" ":ltexec behaviors.modify-user"
                                      "<Space>B" ":ltexec behaviors.view-default"
                                      ; c - for cancel/clear/kill actions
                                      "<Space>cc" ":ltexec clear-console"
                                      "<Space>cC" ":ltexec editor.disconnect-clients"
                                      "<Space>ce" ":ltexec eval.cancel-all!"
                                      "<Space>ct" ":ltexec_clj [:tabset.next :ltfiles.close-current-tabs :tabset.close]"
                                      "<Space>cw" ":ltexec editor.watch.remove-all"
                                      "<Space>cs" ":ltexec reset-working"
                                      ;; (d)ev
                                      "<Space>dc" ":ltexec ltfiles.jump-to-command"
                                      "<Space>db" ":ltexec ltfiles.jump-to-behavior"
                                      "<Space>dB" ":ltexec ltfiles.behavior-bar"
                                      "<Space>do" ":ltexec ltfiles.jump-to-object"
                                      "<Space>dO" ":ltexec ltfiles.object-bar"
                                      "<Space>dt" ":ltexec ltfiles.tag-bar"
                                      ;; (f)ind
                                      "<Space>fd" ":ltexec ltfiles.search-current-folder"
                                      "<Space>ff" ":ltexec ltfiles.search-current-file"
                                      "<Space>fu" ":ltexec ltfiles.search-current-folder-for-fn-usage"
                                      "<Space>fw" ":ltexec ltfiles.search-current-file-with-current-word" ; same as vim's [I
                                      "<Space>fW" ":ltexec ltfiles.search-current-folder-with-current-word"
                                      "<Space>gi" ":ltexec gitbeam.in-with-clipboard"
                                      "<Space>gI" ":ltexec gitbeam.in-with-current-word"
                                      "<Space>go" ":ltexec gitbeam.out-with-external-browser"
                                      "<Space>l" ":ltexec ltfiles.connect-to-lt-ui"
                                      "<Space>k" ":ltexec keymap.modify-user"
                                      "<Space>K" ":ltexec keymap.view-default"
                                      ; (o)pen
                                      "<Space>ob" ":ltexec_clj [:add-browser-tab :browser.url-bar.focus]"
                                      "<Space>oc" ":ltexec ltfiles.rotate-console"
                                      "<Space>oC" ":ltexec_clj [:ltfiles.ensure-and-focus-second-tabset :console-tab :console.show]"
                                      "<Space>of" ":ltexec claire-show"
                                      "<Space>oF" ":ltexec_clj [:ltfiles.ensure-and-focus-second-tabset :editor.open-current-file-in-browser]"
                                      "<Space>ok" ":ltexec ltfiles.keybinding-bar"
                                      "<Space>op" ":ltexec photon.add-folder"
                                      "<Space>oP" ":ltexec photon.remove-folder"
                                      "<Space>or" ":ltexec ltfiles.show-registers"
                                      "<Space>ot" ":ltexec tabset.new"
                                      "<Space>ou" ":ltexec ltfiles.system-open-current-url"
                                      "<Space>oU" ":ltexec ltfiles.tab-open-current-url"
                                      "<Space>ov" ":ltexec ltfiles.vertical-split-current-file" ; sams as vim's C-w v
                                      "<Space>ow" ":ltexec workspace.show-recents"
                                      "<Space>oz" ":ltexec_clj [:tabs.close-others :window.fullscreen]" ; (z)oom
                                      "<Space>pc" ":ltexec ltfiles.system-open-plugin-changelog"
                                      "<Space>pm" ":ltexec plugin-manager.show"
                                      "<Space>r" ":ltexec ltfiles.refresh-current-workspace-folder"
                                      ; (t)oggle
                                      "<Space>tc" ":ltexec toggle-console"
                                      "<Space>tl" ":ltexec ltfiles.toggle-line-numbers"
                                      "<Space>tw" ":ltexec ltfiles.toggle-strip-whitespace"
                                      "<Space>w" ":ltexec workspace.show"
                                      "<Space>x" ":ltexec ltfiles.smart-tab-close"

                                      ;; \\ is leader key for paredit
                                      ;; loosely inspired by https://groups.google.com/forum/#!topic/light-table-discussion/BIyWHnRcoWc
                                      "\\." ":ltexec paredit.grow.right"
                                      "\\," ":ltexec paredit.shrink.right"
                                      "\\<" ":ltexec paredit.grow.left"
                                      "\\>" ":ltexec paredit.shrink.left"
                                      "\\b" ":ltexec ltfiles.paredit-kill-backword"
                                      "\\d" ":ltexec paredit-plus.delete-pair-contents"
                                      "\\j" ":ltexec paredit-plus.join-sexps"
                                      "\\k" ":ltexec paredit-plus.kill"
                                      "\\n" ":ltexec ltfiles.paredit-newline-before-pair-close"
                                      "\\N" ":ltexec paredit-plus.new-line-after-pair-close"
                                      "\\r" ":ltexec paredit-plus.raise-sexp"
                                      ;; handles top-level case that paredit doesn't
                                      "\\s" ":ltexec paredit-plus.splice-sexp"
                                      "\\|" ":ltexec paredit-plus.split-sexp"
                                      "\\(" ":ltexec paredit-plus.wrap-round"
                                      "\\{" ":ltexec paredit-plus.wrap-curly"
                                      "\\[" ":ltexec paredit-plus.wrap-square"
                                      "\\'" ":ltexec paredit-plus.wrap-quote"})
           (:lt.plugins.photon/set-directories
            [:plugins "~/code/fork" "~/code/cjars" "~/code/gems" "~/code/repo"
             "~/.gitbeam" "~/code" "/Volumes/relevance"])]

     ;; The editor tag is applied to all editors
     :editor [:lt.objs.editor/no-wrap
              (:lt.objs.style/set-theme "cobalt")
              (:lt.plugins.vim/activate-vim)
              :lt.objs.editor/hide-line-numbers
              (:lt.plugins.reflow/set-width 80)]

     ;; Here we can add behaviors to just clojure editors
     :editor.clojure [(:lt.objs.langs.clj/print-length 1000)]
     :files [(:lt.objs.files/file-types [{:name "hoplon" :exts [:cljs.hl] :mime "text/x-clojurescript" :tags [:editor.cljs]}])]}

 ;; You can use the subtract key to remove behavior that may get added by
 ;; another diff
 :- {:app [:lt.objs.intro/show-intro]
     ;; turn off aggressive autocomplete
     :editor [:lt.plugins.auto-complete/auto-show-on-input]
     ;; turn off annoying info boxes while editing any behavior
     :editor.behaviors [:lt.objs.langs.behaviors/show-info-on-move]
     ;; allow transient files to close without prompt
     :editor.transient [:lt.objs.editor.file/dirty-on-change]}}}
