{:+ {:app {"alt-tab" [:tabset.next]
           "cmd-k" [:clear-inline-results]
           "alt-d" [:dev-inspector]
           "alt-x" [:tabset.close]
           "cmd-b" [:ltfiles.open-buffers]
           "alt-space" [:ltfiles.commandbar]
           ;; needs to be in :app to print actual context
           "alt-t" [:ltfiles.print-context]}

     :editor {"alt-w" [:editor.watch.watch-selection]
              "alt-shift-w" [:editor.watch.unwatch]

              ;; here instead of <Space> vim/map-keys b/c of selection limitation
              "alt-," [:ltfiles.toggle-current-inline-result]
              "alt-v" [:ltfiles.vim-visual-mode]
              "alt-g" [:gitbeam.out-with-external-browser]
              "alt-shift-g" [:gitbeam.out-with-internal-browser]
              "alt-c" [:gitbeam.out-with-clipboard-copy]
              "alt-shift-c" [:ltfiles.copy-current-inline-result]

              "cmd-=" [:paredit.select.parent :smart-indent-selection :paredit.select.clear]
              ;;Eval the parent ( ... )
              "alt-enter" [(:paredit.select.parent "(")
                           :eval-editor-form
                           :paredit.select.clear]}

     :editor.otl {"shift-enter" [:ltfiles.indent-fold]
                  "shift-tab" [:ltfiles.outdent]
                  "cmd-j" [:ltfiles.jump-forward-on-same-level]
                  "cmd-k" [:ltfiles.jump-backward-on-same-level]
                  "alt-j" [:ltfiles.move-current-tree-down]
                  "alt-k" [:ltfiles.move-current-tree-up]
                  "alt-h" [:ltfiles.unindent-selection]
                  "alt-l" [:ltfiles.indent-selection]
                  "cmd-u" [:ltfiles.jump-to-parent]
                  "cmd-shift-u" [:ltfiles.jump-to-parent :ltfiles.indent-fold] ; fold parent
                  "cmd-." [:ltfiles.select-current-tree]
                  "cmd-a" [:ltfiles.unfold-all]
                  "cmd-x" [:ltfiles.fold-all]
                  "alt-a" [:ltfiles.unfold-all-for-current-tree]
                  "alt-x" [:ltfiles.fold-all-for-current-tree]
                  "alt-o" [:ltfiles.unfold-one-level-for-current-tree]
                  "alt-p" [:ltfiles.fold-one-level-for-current-tree]
                  "alt-1" [:ltfiles.fold-level-1]
                  "alt-2" [:ltfiles.fold-level-2]
                  "alt-3" [:ltfiles.fold-level-3]
                  "alt-4" [:ltfiles.fold-level-4]
                  "alt-5" [:ltfiles.fold-level-5]
                  "alt-6" [:ltfiles.fold-level-6]
                  "alt-7" [:ltfiles.fold-level-7]
                  "alt-8" [:ltfiles.fold-level-8]
                  "alt-9" [:ltfiles.fold-level-9]}

     :editor.keys.vim.normal {;; Satisfied having as a default. Can always make this more specific - https://github.com/LightTable/LightTable/issues/1379
                              "backspace" [:paredit-plus.backward-delete]
                              "alt-q" [:lt.plugins.reflow/reflow] ; alt-q since gq doesn't work
                              ;;Select the parent expression, whether that's [], {}, or ()
                              "cmd-," [:paredit.select.parent]
                              "cmd-;" [:ltfiles.vim-toggle-comment-selection]}

     ;; avoid going too out of the way keys for command bar
     :filter-list.input { "ctrl-n" [(:filter-list.input.move-selection 1)]
                          "ctrl-p" [(:filter-list.input.move-selection -1)]}

     :workspace.focused {"ctrl-n" [:lt.plugins.workspace-nav/navigate-south]
                         "ctrl-p" [:lt.plugins.workspace-nav/navigate-north]}

     :tabs {"ctrl-tab" [:snippet.select]}

     ;; Broken alt combos: i,e

     ;; Thanks to https://github.com/jamii/lt-config/ for most watches
     :editor.clj {"alt-p" [(:eval.custom "(with-out-str (clojure.pprint/write __SELECTION__ :suppress-namespaces false :dispatch clojure.pprint/code-dispatch))" {:result-type :inline :verbatim true})]
                  "alt-shift-p" [(:eval.custom "(with-out-str (clojure.pprint/write __SELECTION__ :suppress-namespaces false :dispatch clojure.pprint/code-dispatch))" {:result-type :replace :verbatim true})]
                  "alt-m" [(:eval.custom "(with-out-str (clojure.pprint/write (macroexpand-1 '__SELECTION__) :suppress-namespaces false :dispatch clojure.pprint/code-dispatch))" {:result-type :inline :verbatim true})]
                  "alt-b" [(:eval.custom "(with-out-str (time (do __SELECTION__)))" {:result-type :inline :verbatim true})]
                  "alt-r" [(:eval.custom "(clojure.test/run-tests)" {:result-type :statusbar})]
                  "alt-shift-b" [(:eval.custom "(do (require '[criterium.core]) (with-out-str (criterium.core/bench (do __SELECTION__))))" {:result-type :inline :verbatim true})]
                  ;; watches
                  "alt-shift-t" [(:editor.watch.custom-watch-selection "(let [result (do __SELECTION__)] (prn __SELECTION*__ result) __|result|__ result)" {})]
                  "alt-t" [(:editor.watch.custom-watch-selection "(let [start (java.lang.System/nanoTime)
                                                                 res (do __SELECTION__)]
                                                                 __|(str (float (/ (- (java.lang.System/nanoTime) start) 1000000)) \" ms\")|__
                                                                 res)" {:class "timed" :verbatim true})]
                  ;; requires lein-kibit
                  ;; from https://github.com/danielribeiro/LightTableKibit
                  "alt-k" [(:eval.custom
                              "(do
                              (require 'kibit.check)
                              (prn :WOW)
                              (if-let [better (kibit.check/check-expr '__SELECTION__)]
                              (with-out-str
                              (clojure.pprint/write (:alt better)
                              :suppress-namespaces true
                              :dispatch clojure.pprint/code-dispatch))
                              __SELECTION*__))"
                              {:result-type :replace :verbatim true})]}
     :editor.cljs {"alt-p" [(:eval.custom "(.log js/console __SELECTION__)" {:result-type :inline :verbatim true})]
                   "alt-shift-p" [(:eval.custom "(prn __SELECTION__)" {:result-type :inline :verbatim true})]
                   ;; Sorts a clojure :require statement. Doesn't pretty print it yet
                   "alt-r" [(:eval.custom "(cons (first '__SELECTION__) (sort (rest '__SELECTION__)))" {:result-type :replace :verbatim false})]}}

 :- {:app {"ctrl-x ctrl-f" [:claire-show]}}}
